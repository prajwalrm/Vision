import cv2
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

### Step 1: Highlighted Text Detection Using Your Existing OCR Code ###

def extract_highlighted_text(image_path):
    """
    Detects yellow-highlighted text using OpenCV and processes it for OCR.
    """
    # Read the image
    image = cv2.imread(image_path)
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Define the lower and upper bounds for yellow highlight
    lower_yellow = np.array([20, 100, 100])
    upper_yellow = np.array([30, 255, 255])

    # Create a mask to detect yellow-highlighted areas
    yellow_mask = cv2.inRange(hsv, lower_yellow, upper_yellow)

    # Find contours of the yellow-highlighted regions
    contours, _ = cv2.findContours(yellow_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    extracted_texts = []
    total_price = 0

    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)

        # Extract the highlighted region
        highlighted_region = image[y:y+h, x:x+w]

        # Convert to grayscale
        gray = cv2.cvtColor(highlighted_region, cv2.COLOR_BGR2GRAY)

        # Apply thresholding to enhance text visibility
        _, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY_INV)

        # Perform OCR using the TensorFlow model
        detected_text = extract_text_from_tensor(binary)

        extracted_texts.append({"highlighted_text": detected_text})

        # Check if it's a price and sum it
        price_value = extract_price_from_text(detected_text)
        if price_value is not None:
            total_price += price_value

    return extracted_texts, total_price


### Step 2: Image Preprocessing for OCR ###

def preprocess_image(image):
    """
    Converts the highlighted text region to grayscale and applies thresholding.
    """
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply adaptive thresholding
    binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    return binary


### Step 3: Segment Individual Characters ###

def segment_characters(image):
    """
    Finds individual characters by detecting contours in the processed image.
    """
    contours, _ = cv2.findContours(image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    character_images = []
    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)

        # Ignore small regions (noise)
        if w > 5 and h > 10:
            char_image = image[y:y+h, x:x+w]
            character_images.append((x, char_image))

    # Sort characters by x-coordinate to maintain text order
    character_images = sorted(character_images, key=lambda c: c[0])

    return [char[1] for char in character_images]


### Step 4: Train a Simple TensorFlow Model for OCR ###

def create_ocr_model():
    """
    Creates a basic CNN model for recognizing digits (0-9).
    """
    model = keras.Sequential([
        layers.Conv2D(32, kernel_size=(3,3), activation="relu", input_shape=(28,28,1)),
        layers.MaxPooling2D(pool_size=(2,2)),
        layers.Conv2D(64, kernel_size=(3,3), activation="relu"),
        layers.MaxPooling2D(pool_size=(2,2)),
        layers.Flatten(),
        layers.Dense(128, activation="relu"),
        layers.Dense(10, activation="softmax")  # Output layer for digits 0-9
    ])

    # Compile the model
    model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

    return model


### Step 5: Recognize Characters Using the OCR Model ###

# Load the OCR model (Assuming it's trained and saved as 'ocr_model.h5')
ocr_model = create_ocr_model()
# Uncomment below if you already trained a model and saved it
# ocr_model.load_weights("ocr_model.h5")


def recognize_character(char_image):
    """
    Recognizes a single character using the trained CNN OCR model.
    """
    # Resize to 28x28 (same as training data)
    char_image = cv2.resize(char_image, (28,28))

    # Normalize pixel values
    char_image = char_image.astype("float32") / 255.0
    char_image = np.expand_dims(char_image, axis=0)  # Add batch dimension
    char_image = np.expand_dims(char_image, axis=-1) # Add channel dimension

    # Predict character
    prediction = ocr_model.predict(char_image)
    predicted_class = np.argmax(prediction)

    return str(predicted_class)  # Convert digit to string


### Step 6: Convert Image to Text Using OCR Model ###

def extract_text_from_tensor(binary_image):
    """
    Uses OpenCV character segmentation and TensorFlow OCR model to extract text.
    """
    characters = segment_characters(binary_image)

    recognized_text = ""
    for char_img in characters:
        recognized_text += recognize_character(char_img) + " "

    return recognized_text.strip()


### Step 7: Extract Prices from Text ###

def extract_price_from_text(text):
    """
    Extracts numeric values from text if they represent a price.
    """
    parts = text.split()
    for part in parts:
        if part.isdigit():
            return int(part)
    return None


### Step 8: Run the Full OCR Pipeline ###

image_path = "/mnt/data/image.png"  # Replace with your image path
highlighted_texts, total_price = extract_highlighted_text(image_path)

# Print results
print("Extracted Highlighted Texts:")
print(highlighted_texts)
print("\nTotal Highlighted Price:", total_price)
